// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SFCoreProTM.Persistence.Data;

#nullable disable

namespace SFCoreProTM.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251018193821_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SFCoreProTM.Domain.Entities.Projects.ErdDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("AttributeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("AttributeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("ErdStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAcceptNull")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrimaryKey")
                        .HasColumnType("boolean");

                    b.Property<string>("MaxChar")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uuid");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("TName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("erd_definitions", (string)null);
                });

            modelBuilder.Entity("SFCoreProTM.Domain.Entities.Projects.FlowTask", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("FlowStatus")
                        .HasColumnType("integer");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("flow_tasks", (string)null);
                });

            modelBuilder.Entity("SFCoreProTM.Domain.Entities.Projects.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("modules", (string)null);
                });

            modelBuilder.Entity("SFCoreProTM.Domain.Entities.Projects.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ProjectPath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("projects", (string)null);
                });

            modelBuilder.Entity("SFCoreProTM.Domain.Entities.Projects.SprintPlanning", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<int>("SprintStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("TargetDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("sprint_plannings", (string)null);
                });

            modelBuilder.Entity("SFCoreProTM.Domain.Entities.Projects.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsErd")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("tasks", (string)null);
                });

            modelBuilder.Entity("SFCoreProTM.Domain.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AvatarAssetId")
                        .HasColumnType("uuid")
                        .HasColumnName("avatar_asset_id");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<string>("BotType")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("bot_type");

                    b.Property<Guid?>("CoverImageAssetId")
                        .HasColumnType("uuid")
                        .HasColumnName("cover_image_asset_id");

                    b.Property<string>("CoverImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("cover_image");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedLocation")
                        .HasColumnType("text")
                        .HasColumnName("created_location");

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_joined");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("display_name");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsBot")
                        .HasColumnType("boolean")
                        .HasColumnName("is_bot");

                    b.Property<bool>("IsEmailValid")
                        .HasColumnType("boolean")
                        .HasColumnName("is_email_valid");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("is_email_verified");

                    b.Property<bool>("IsManaged")
                        .HasColumnType("boolean")
                        .HasColumnName("is_managed");

                    b.Property<bool>("IsPasswordAutoset")
                        .HasColumnType("boolean")
                        .HasColumnName("is_password_autoset");

                    b.Property<bool>("IsPasswordExpired")
                        .HasColumnType("boolean")
                        .HasColumnName("is_password_expired");

                    b.Property<bool>("IsStaff")
                        .HasColumnType("boolean")
                        .HasColumnName("is_staff");

                    b.Property<bool>("IsSuperUser")
                        .HasColumnType("boolean")
                        .HasColumnName("is_superuser");

                    b.Property<DateTime?>("LastActive")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_active");

                    b.Property<string>("LastLocation")
                        .HasColumnType("text")
                        .HasColumnName("last_location");

                    b.Property<string>("LastLoginIp")
                        .HasColumnType("text")
                        .HasColumnName("last_login_ip");

                    b.Property<string>("LastLoginMedium")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("last_login_medium");

                    b.Property<DateTime?>("LastLoginTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_time");

                    b.Property<string>("LastLoginUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("last_login_uagent");

                    b.Property<string>("LastLogoutIp")
                        .HasColumnType("text")
                        .HasColumnName("last_logout_ip");

                    b.Property<DateTime?>("LastLogoutTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_logout_time");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("MaskedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("masked_at");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("mobile_number");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<DateTime?>("TokenUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("token_updated_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserTimezone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("user_timezone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("SFCoreProTM.Domain.Entities.Users.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("BackgroundColor")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<string>("BillingAddress")
                        .HasColumnType("jsonb");

                    b.Property<string>("BillingAddressCountry")
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text");

                    b.Property<string>("Goals")
                        .HasColumnType("jsonb");

                    b.Property<bool?>("HasBillingAddress")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HasMarketingEmailConsent")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsAppRailDocked")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsMobileOnboarded")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsOnboarded")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsSmoothCursorEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsTourCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<Guid?>("LastWorkspaceId")
                        .HasColumnType("uuid");

                    b.Property<string>("MobileOnboardingStep")
                        .HasColumnType("jsonb");

                    b.Property<bool?>("MobileTimezoneAutoSet")
                        .HasColumnType("boolean");

                    b.Property<string>("OnboardingStep")
                        .HasColumnType("jsonb");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<int?>("StartOfTheWeek")
                        .HasColumnType("integer");

                    b.Property<string>("Theme")
                        .HasColumnType("jsonb");

                    b.Property<string>("UseCase")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("user_profiles", (string)null);
                });

            modelBuilder.Entity("SFCoreProTM.Domain.Entities.Workspaces.Workspace", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("AuditTrail")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("BackgroundColor")
                        .HasColumnType("text")
                        .HasColumnName("background_color");

                    b.Property<string>("Logo")
                        .HasColumnType("text")
                        .HasColumnName("logo");

                    b.Property<Guid?>("LogoAssetId")
                        .HasColumnType("uuid")
                        .HasColumnName("logo_asset_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OrganizationSize")
                        .HasColumnType("text")
                        .HasColumnName("organization_size");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("workspaces", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
