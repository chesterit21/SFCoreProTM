// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SFCoreProTM.Persistence.Data;

#nullable disable

namespace SFCoreProTM.Persistence.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SFCoreProTM.Domain.Entities.Issues.Issue", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AuditTrail")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("EstimatePointId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("IssueTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<int?>("PointEstimate")
                        .HasColumnType("integer");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Schedule")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("SequenceId")
                        .HasColumnType("integer");

                    b.Property<double>("SortOrder")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("StateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("issues", (string)null);
                });

            modelBuilder.Entity("SFCoreProTM.Domain.Entities.Issues.IssueAssignee", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssigneeId")
                        .HasColumnType("uuid");

                    b.Property<string>("AuditTrail")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid>("IssueId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("issue_assignees", (string)null);
                });

            modelBuilder.Entity("SFCoreProTM.Domain.Entities.Issues.IssueComment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Access")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<Guid?>("ActorId")
                        .HasColumnType("uuid");

                    b.Property<string>("AuditTrail")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("CommentJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("CommentStripped")
                        .HasColumnType("text")
                        .HasColumnName("comment_stripped");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IssueId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.Property<string>("_attachments")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("attachments");

                    b.HasKey("Id");

                    b.ToTable("issue_comments", (string)null);
                });

            modelBuilder.Entity("SFCoreProTM.Domain.Entities.Issues.IssueDescriptionVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("AuditTrail")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("description");

                    b.Property<Guid>("IssueId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId", "IssueId", "RecordedAt")
                        .HasDatabaseName("ix_issue_description_versions_timeline");

                    b.ToTable("issue_description_versions", (string)null);
                });

            modelBuilder.Entity("SFCoreProTM.Domain.Entities.Issues.IssueLabel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("AuditTrail")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid>("IssueId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LabelId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("issue_labels", (string)null);
                });

            modelBuilder.Entity("SFCoreProTM.Domain.Entities.Issues.IssueType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("AuditTrail")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ExternalReference")
                        .HasColumnType("jsonb");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEpic")
                        .HasColumnType("boolean");

                    b.Property<double>("Level")
                        .HasColumnType("double precision");

                    b.Property<string>("LogoProperties")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("issue_types", (string)null);
                });

            modelBuilder.Entity("SFCoreProTM.Domain.Entities.Issues.IssueUserProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("AuditTrail")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Preferences")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("issue_user_properties", (string)null);
                });

            modelBuilder.Entity("SFCoreProTM.Domain.Entities.Issues.IssueVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ActivityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AuditTrail")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CycleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EstimatePointId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("boolean");

                    b.Property<Guid>("IssueId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IssueTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("meta");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Properties")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("properties");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SequenceId")
                        .HasColumnType("integer");

                    b.Property<double>("SortOrder")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("StateId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.Property<Guid[]>("_assigneeIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("assignees");

                    b.Property<Guid[]>("_labelIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("labels");

                    b.Property<Guid[]>("_moduleIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("modules");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId", "IssueId", "SequenceId")
                        .HasDatabaseName("ix_issue_versions_project_issue_sequence");

                    b.ToTable("issue_versions", (string)null);
                });

            modelBuilder.Entity("SFCoreProTM.Domain.Entities.Issues.ProjectIssueType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("AuditTrail")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<Guid>("IssueTypeId")
                        .HasColumnType("uuid");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("project_issue_types", (string)null);
                });

            modelBuilder.Entity("SFCoreProTM.Domain.Entities.Projects.EstimatePoint", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("AuditTrail")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("EstimateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("estimate_points", (string)null);
                });

            modelBuilder.Entity("SFCoreProTM.Domain.Entities.Projects.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("ArchiveInMonths")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AuditTrail")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("CloseInMonths")
                        .HasColumnType("integer");

                    b.Property<string>("CoverImage")
                        .HasColumnType("text")
                        .HasColumnName("cover_image");

                    b.Property<Guid?>("CoverImageAssetId")
                        .HasColumnType("uuid")
                        .HasColumnName("cover_image_asset_id");

                    b.Property<bool>("CycleViewEnabled")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("DefaultAssigneeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DefaultStateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("DescriptionHtml")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("DescriptionRichText")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Emoji")
                        .HasColumnType("text");

                    b.Property<Guid?>("EstimateId")
                        .HasColumnType("uuid");

                    b.Property<string>("ExternalReference")
                        .HasColumnType("jsonb");

                    b.Property<bool>("GuestViewAllFeatures")
                        .HasColumnType("boolean");

                    b.Property<string>("IconProperties")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<bool>("IntakeViewEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IssueTypeEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IssueViewsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("LogoProperties")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<bool>("ModuleViewEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("PageViewEnabled")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ProjectLeadId")
                        .HasColumnType("uuid");

                    b.Property<bool>("TimeTrackingEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("projects", (string)null);
                });

            modelBuilder.Entity("SFCoreProTM.Domain.Entities.Projects.ProjectIdentifier", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("AuditTrail")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("project_identifiers", (string)null);
                });

            modelBuilder.Entity("SFCoreProTM.Domain.Entities.Projects.ProjectMember", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("AuditTrail")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<string>("Preferences")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<double>("SortOrder")
                        .HasColumnType("double precision");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("project_members", (string)null);
                });

            modelBuilder.Entity("SFCoreProTM.Domain.Entities.Projects.ProjectMemberInvite", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Accepted")
                        .HasColumnType("boolean")
                        .HasColumnName("accepted");

                    b.Property<string>("AuditTrail")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("RespondedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("responded_at");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<Guid>("Token")
                        .HasColumnType("uuid")
                        .HasColumnName("token");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("project_member_invites", (string)null);
                });

            modelBuilder.Entity("SFCoreProTM.Domain.Entities.Projects.State", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("AuditTrail")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ExternalReference")
                        .HasColumnType("jsonb");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTriage")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<int>("Sequence")
                        .HasColumnType("integer");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("states", (string)null);
                });

            modelBuilder.Entity("SFCoreProTM.Domain.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AvatarAssetId")
                        .HasColumnType("uuid")
                        .HasColumnName("avatar_asset_id");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<string>("BotType")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("bot_type");

                    b.Property<Guid?>("CoverImageAssetId")
                        .HasColumnType("uuid")
                        .HasColumnName("cover_image_asset_id");

                    b.Property<string>("CoverImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("cover_image");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedLocation")
                        .HasColumnType("text")
                        .HasColumnName("created_location");

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_joined");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("display_name");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsBot")
                        .HasColumnType("boolean")
                        .HasColumnName("is_bot");

                    b.Property<bool>("IsEmailValid")
                        .HasColumnType("boolean")
                        .HasColumnName("is_email_valid");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("is_email_verified");

                    b.Property<bool>("IsManaged")
                        .HasColumnType("boolean")
                        .HasColumnName("is_managed");

                    b.Property<bool>("IsPasswordAutoset")
                        .HasColumnType("boolean")
                        .HasColumnName("is_password_autoset");

                    b.Property<bool>("IsPasswordExpired")
                        .HasColumnType("boolean")
                        .HasColumnName("is_password_expired");

                    b.Property<bool>("IsStaff")
                        .HasColumnType("boolean")
                        .HasColumnName("is_staff");

                    b.Property<bool>("IsSuperUser")
                        .HasColumnType("boolean")
                        .HasColumnName("is_superuser");

                    b.Property<DateTime?>("LastActive")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_active");

                    b.Property<string>("LastLocation")
                        .HasColumnType("text")
                        .HasColumnName("last_location");

                    b.Property<string>("LastLoginIp")
                        .HasColumnType("text")
                        .HasColumnName("last_login_ip");

                    b.Property<string>("LastLoginMedium")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("last_login_medium");

                    b.Property<DateTime?>("LastLoginTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_time");

                    b.Property<string>("LastLoginUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("last_login_uagent");

                    b.Property<string>("LastLogoutIp")
                        .HasColumnType("text")
                        .HasColumnName("last_logout_ip");

                    b.Property<DateTime?>("LastLogoutTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_logout_time");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("MaskedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("masked_at");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("mobile_number");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<DateTime?>("TokenUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("token_updated_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserTimezone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("user_timezone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("SFCoreProTM.Domain.Entities.Users.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("BackgroundColor")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<string>("BillingAddress")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("BillingAddressCountry")
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text");

                    b.Property<string>("Goals")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<bool>("HasBillingAddress")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasMarketingEmailConsent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAppRailDocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMobileOnboarded")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOnboarded")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSmoothCursorEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTourCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<Guid?>("LastWorkspaceId")
                        .HasColumnType("uuid");

                    b.Property<string>("MobileOnboardingStep")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<bool>("MobileTimezoneAutoSet")
                        .HasColumnType("boolean");

                    b.Property<string>("OnboardingStep")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<int>("StartOfTheWeek")
                        .HasColumnType("integer");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("UseCase")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("user_profiles", (string)null);
                });

            modelBuilder.Entity("SFCoreProTM.Domain.Entities.Workspaces.Label", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("AuditTrail")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ExternalReference")
                        .HasColumnType("jsonb");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("labels", (string)null);
                });

            modelBuilder.Entity("SFCoreProTM.Domain.Entities.Workspaces.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("SFCoreProTM.Domain.Entities.Workspaces.Workspace", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("AuditTrail")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("BackgroundColor")
                        .HasColumnType("text")
                        .HasColumnName("background_color");

                    b.Property<string>("Logo")
                        .HasColumnType("text")
                        .HasColumnName("logo");

                    b.Property<Guid?>("LogoAssetId")
                        .HasColumnType("uuid")
                        .HasColumnName("logo_asset_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OrganizationSize")
                        .HasColumnType("text")
                        .HasColumnName("organization_size");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("workspaces", (string)null);
                });

            modelBuilder.Entity("SFCoreProTM.Domain.Entities.Workspaces.WorkspaceMember", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("AuditTrail")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("CompanyRole")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<string>("Preferences")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("workspace_members", (string)null);
                });

            modelBuilder.Entity("SFCoreProTM.Domain.Entities.Workspaces.WorkspaceMemberInvite", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Accepted")
                        .HasColumnType("boolean")
                        .HasColumnName("accepted");

                    b.Property<string>("AuditTrail")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<DateTime?>("RespondedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("responded_at");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<Guid>("Token")
                        .HasColumnType("uuid")
                        .HasColumnName("token");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("workspace_member_invites", (string)null);
                });

            modelBuilder.Entity("SFCoreProTM.Domain.Entities.Issues.Issue", b =>
                {
                    b.OwnsOne("SFCoreProTM.Domain.ValueObjects.ExternalReference", "ExternalReference", b1 =>
                        {
                            b1.Property<Guid>("IssueId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Identifier")
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("external_id");

                            b1.Property<string>("Source")
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("external_source");

                            b1.HasKey("IssueId");

                            b1.ToTable("issues");

                            b1.WithOwner()
                                .HasForeignKey("IssueId");
                        });

                    b.Navigation("ExternalReference");
                });

            modelBuilder.Entity("SFCoreProTM.Domain.Entities.Issues.IssueComment", b =>
                {
                    b.OwnsOne("SFCoreProTM.Domain.ValueObjects.ExternalReference", "ExternalReference", b1 =>
                        {
                            b1.Property<Guid>("IssueCommentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Identifier")
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("external_id");

                            b1.Property<string>("Source")
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("external_source");

                            b1.HasKey("IssueCommentId");

                            b1.ToTable("issue_comments");

                            b1.WithOwner()
                                .HasForeignKey("IssueCommentId");
                        });

                    b.Navigation("ExternalReference");
                });

            modelBuilder.Entity("SFCoreProTM.Domain.Entities.Issues.IssueVersion", b =>
                {
                    b.OwnsOne("SFCoreProTM.Domain.ValueObjects.ExternalReference", "ExternalReference", b1 =>
                        {
                            b1.Property<Guid>("IssueVersionId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Identifier")
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("external_id");

                            b1.Property<string>("Source")
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("external_source");

                            b1.HasKey("IssueVersionId");

                            b1.ToTable("issue_versions");

                            b1.WithOwner()
                                .HasForeignKey("IssueVersionId");
                        });

                    b.Navigation("ExternalReference");
                });

            modelBuilder.Entity("SFCoreProTM.Domain.Entities.Projects.ProjectMember", b =>
                {
                    b.HasOne("SFCoreProTM.Domain.Entities.Projects.Project", null)
                        .WithMany("Members")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SFCoreProTM.Domain.Entities.Workspaces.Team", b =>
                {
                    b.HasOne("SFCoreProTM.Domain.Entities.Workspaces.Workspace", null)
                        .WithMany("Teams")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SFCoreProTM.Domain.Entities.Workspaces.WorkspaceMember", b =>
                {
                    b.HasOne("SFCoreProTM.Domain.Entities.Workspaces.Workspace", null)
                        .WithMany("Members")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SFCoreProTM.Domain.Entities.Projects.Project", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("SFCoreProTM.Domain.Entities.Workspaces.Workspace", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Teams");
                });
#pragma warning restore 612, 618
        }
    }
}
